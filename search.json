[
  {
    "objectID": "football-R6-example/index.html",
    "href": "football-R6-example/index.html",
    "title": "Football (soccer) example of object-oriented programming in R6",
    "section": "",
    "text": "R6 provides the sort of object-oriented programming capabilities that closely resemble the class system in Python or Julia, and to a somewhat lesser extent Java, C++, and other compiled languages that natively support object-oriented programming.\nThis football/soccer example is intended as a gentle, fun introduction to object-oriented programming in R using the R6 library. Beginners will learn the basic concepts of object-oriented programming, including what a class is and how to use it to represent the state, behaviors, capacities, and susceptibilities of real-world entities: here we model soccer players, their teams, and soccer match gameplay.\nAfter the demonstration the reader can get more practice with R6 and classes by following the exercises below. These prompt the reader to expand model football gameplay by having players get penalties, making the penalties matter for the final score, and inventing their own classes to represent some other system of interest within their research program, personal hobbies, or something else.\nFollow the demonstration below and study the code in the files below to learn how object-oriented programming is used to represent entities in the world and their behaviors. socmod uses\n\n\nWe load and use R code contained in the R/ directory of this example project. There we have the following files:\n\nR/footballer.R – defines the Footballer class, i.e., soccer player\nR/team.R – defines the Team class, which “contains” players.\nR/play_match.R – defines the play_match(team1, team2) function.\n\nIt’s common to separate the R code that defines each class into separate files, and separate any functions that relate to one type or the other, or functions that use multiple types defined across disparate files.\n\n\n\nWe load code in R using the source command, which we’ll use now to load the code in the listed files. In each of the following blocks we load one of the files, then use some code from there to demonstrate it’s working. Following these three blocks is an example of a three-game series between two teams, the Whales and the Squirrels.\n\nsource(\"R/footballer.R\")\n\nfballer &lt;- Footballer$new(\n  speed = 15, name = \"Matt Turner\", \n  accuracy = 0.2, market_value = 1e6, \n  aggressiveness = 0.5, \n  team = \"FC Bayern Munich\"\n)\n\nprint(fballer$team)\n\n[1] \"FC Bayern Munich\"\n\n# Change attributes, e.g., if I've been practicing:\nfballer$accuracy &lt;- 0.3\n\n# We can also create anonymous players with default attributes like so:\nfballer_default &lt;- Footballer$new()\n\n\nsource(\"R/team.R\")\n\n# Create a team with two anonymous players.\nteam &lt;- Team$new(name = \"Bay FC\", \n                 players = list(Footballer$new(),\n                                Footballer$new()))\n\n\nsource(\"R/play_match.R\")\n# Have the team defined above play a scrimmage amongst themselves.\nplay_match(team, team)\n\nBay FC wins!!!\nBay FC :  4     Bay FC :  3 \n\n\n\n\nInitialize two teams, Whales and Squirrels, each with two players. All players have identical default attributes.\n\nwhales &lt;- Team$new(\n  name = \"Whales\", \n  players = c(Footballer$new(), Footballer$new())\n)\nsquirrels &lt;- Team$new(\n  name = \"Squirrels\", \n  players = c(Footballer$new(), Footballer$new())\n)\n\n# Play three matches.\nplay_match(whales, squirrels)\n\nSquirrels wins!!!\nWhales :  2     Squirrels :  6 \n\nplay_match(squirrels, whales)\n\nSquirrels wins!!!\nSquirrels :  6     Whales :  3 \n\nplay_match(squirrels, whales)\n\nWhales wins!!!\nSquirrels :  1     Whales :  5 \n\n# Print how many games each time won.\ncat(\"\\nAfter three games...\", \"\\nThe Whales have won\", \n    whales$wins, \"games and the Squirrels have won\", squirrels$wins)\n\n\nAfter three games... \nThe Whales have won 1 games and the Squirrels have won 2\n\n\nWhen modeling social behavior in professional contexts, our closing paragraphs always include a meditation about the limitations of our model. In one sense it’s by design that our model assumptions do not exactly match the real world: the goals of our science is not realism but rigor. However, alternative, potentially equally justifiable, assumptions about social behavior may lead to different model outcomes. This exercise often identifies opportunities for future research that more thoroughly tests different combinations of assumptions that are empirically and practically important.\nIn our toy example of a football match, where we created our own software representations of teams and players, we made serious simplifications, but nonetheless could observe outcomes that somewhat resembled the real world: the teams won, lost, and tied, and we tracked their records over a three-game series.\nWe left out features of gameplay and personnel management that could be interesting to include in future iterations of the model. We did not include penalties. We did not differentiate shots on goal versus errant shots.\n\n\n\n\n\nUpdate the code to model penalties and their consequences. Possible approaches include:\n\n\nIterate through all agents to see if they get penalties like with scoring.\nPossible consequences:\n\nA player from the opposing team gets a penalty kick\nThe player gets removed from contributing to the game\n\n\n\nAdd personnel management, perhaps in the form of:\n\n\nA college draft process where teams add players to their roster with fixed salary\nA Team$release_player() method to let players go, would pair with $sign_player()\nA function for teams to trade players, e.g., trade(team1, player1, team2, player2)\n\n\nAdd a Season class to schedule and run matches (i.e., with play_match), track and summarise standings, etc.\nA similar Tournament class or function to represent elimination-style tournaments."
  },
  {
    "objectID": "football-R6-example/index.html#project-structure",
    "href": "football-R6-example/index.html#project-structure",
    "title": "Football (soccer) example of object-oriented programming in R6",
    "section": "",
    "text": "We load and use R code contained in the R/ directory of this example project. There we have the following files:\n\nR/footballer.R – defines the Footballer class, i.e., soccer player\nR/team.R – defines the Team class, which “contains” players.\nR/play_match.R – defines the play_match(team1, team2) function.\n\nIt’s common to separate the R code that defines each class into separate files, and separate any functions that relate to one type or the other, or functions that use multiple types defined across disparate files."
  },
  {
    "objectID": "football-R6-example/index.html#football-example",
    "href": "football-R6-example/index.html#football-example",
    "title": "Football (soccer) example of object-oriented programming in R6",
    "section": "",
    "text": "We load code in R using the source command, which we’ll use now to load the code in the listed files. In each of the following blocks we load one of the files, then use some code from there to demonstrate it’s working. Following these three blocks is an example of a three-game series between two teams, the Whales and the Squirrels.\n\nsource(\"R/footballer.R\")\n\nfballer &lt;- Footballer$new(\n  speed = 15, name = \"Matt Turner\", \n  accuracy = 0.2, market_value = 1e6, \n  aggressiveness = 0.5, \n  team = \"FC Bayern Munich\"\n)\n\nprint(fballer$team)\n\n[1] \"FC Bayern Munich\"\n\n# Change attributes, e.g., if I've been practicing:\nfballer$accuracy &lt;- 0.3\n\n# We can also create anonymous players with default attributes like so:\nfballer_default &lt;- Footballer$new()\n\n\nsource(\"R/team.R\")\n\n# Create a team with two anonymous players.\nteam &lt;- Team$new(name = \"Bay FC\", \n                 players = list(Footballer$new(),\n                                Footballer$new()))\n\n\nsource(\"R/play_match.R\")\n# Have the team defined above play a scrimmage amongst themselves.\nplay_match(team, team)\n\nBay FC wins!!!\nBay FC :  4     Bay FC :  3 \n\n\n\n\nInitialize two teams, Whales and Squirrels, each with two players. All players have identical default attributes.\n\nwhales &lt;- Team$new(\n  name = \"Whales\", \n  players = c(Footballer$new(), Footballer$new())\n)\nsquirrels &lt;- Team$new(\n  name = \"Squirrels\", \n  players = c(Footballer$new(), Footballer$new())\n)\n\n# Play three matches.\nplay_match(whales, squirrels)\n\nSquirrels wins!!!\nWhales :  2     Squirrels :  6 \n\nplay_match(squirrels, whales)\n\nSquirrels wins!!!\nSquirrels :  6     Whales :  3 \n\nplay_match(squirrels, whales)\n\nWhales wins!!!\nSquirrels :  1     Whales :  5 \n\n# Print how many games each time won.\ncat(\"\\nAfter three games...\", \"\\nThe Whales have won\", \n    whales$wins, \"games and the Squirrels have won\", squirrels$wins)\n\n\nAfter three games... \nThe Whales have won 1 games and the Squirrels have won 2\n\n\nWhen modeling social behavior in professional contexts, our closing paragraphs always include a meditation about the limitations of our model. In one sense it’s by design that our model assumptions do not exactly match the real world: the goals of our science is not realism but rigor. However, alternative, potentially equally justifiable, assumptions about social behavior may lead to different model outcomes. This exercise often identifies opportunities for future research that more thoroughly tests different combinations of assumptions that are empirically and practically important.\nIn our toy example of a football match, where we created our own software representations of teams and players, we made serious simplifications, but nonetheless could observe outcomes that somewhat resembled the real world: the teams won, lost, and tied, and we tracked their records over a three-game series.\nWe left out features of gameplay and personnel management that could be interesting to include in future iterations of the model. We did not include penalties. We did not differentiate shots on goal versus errant shots."
  },
  {
    "objectID": "football-R6-example/index.html#exercises",
    "href": "football-R6-example/index.html#exercises",
    "title": "Football (soccer) example of object-oriented programming in R6",
    "section": "",
    "text": "Update the code to model penalties and their consequences. Possible approaches include:\n\n\nIterate through all agents to see if they get penalties like with scoring.\nPossible consequences:\n\nA player from the opposing team gets a penalty kick\nThe player gets removed from contributing to the game\n\n\n\nAdd personnel management, perhaps in the form of:\n\n\nA college draft process where teams add players to their roster with fixed salary\nA Team$release_player() method to let players go, would pair with $sign_player()\nA function for teams to trade players, e.g., trade(team1, player1, team2, player2)\n\n\nAdd a Season class to schedule and run matches (i.e., with play_match), track and summarise standings, etc.\nA similar Tournament class or function to represent elimination-style tournaments."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "socmod examples",
    "section": "",
    "text": "This website is a way to deliver examples of the socmod library and related concepts.\n\n\n\nFootball/soccer example that illustrates how to use the R6 library for object-oriented programming. Understanding object-oriented programming concepts will help design agent-based models of social behavior, and is a key component in the design of socmod.\n\n\n\n\nSimple diffusion of adaptive behaviors with different learning strategies\nMedici solar panel business opportunity\nA sipmlified version of Turner et al 2023"
  },
  {
    "objectID": "index.html#index",
    "href": "index.html#index",
    "title": "socmod examples",
    "section": "",
    "text": "Football/soccer example that illustrates how to use the R6 library for object-oriented programming. Understanding object-oriented programming concepts will help design agent-based models of social behavior, and is a key component in the design of socmod.\n\n\n\n\nSimple diffusion of adaptive behaviors with different learning strategies\nMedici solar panel business opportunity\nA sipmlified version of Turner et al 2023"
  }
]